from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from random import shuffle
import re

from app.states import RegisterState
from app.db.models import UserProfile, UserLike
from app.db.database import get_session

router = Router()

def main_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞"),
        types.KeyboardButton(text="üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
    )
    builder.row(
        types.KeyboardButton(text="üì∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    )
    builder.row(
        types.KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É") 
    )
    return builder.as_markup(resize_keyboard=True)

def format_profile(profile: UserProfile) -> str:
    return (
        f"üìù –ê–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –ò–º—è: {profile.name}\n"
        f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {profile.age}\n"
        f"üöª –ü–æ–ª: {profile.gender}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {profile.city}\n"
        f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.interests}\n"
        f"üè∑Ô∏è –¢–µ–≥: @id{profile.telegram_id}"
    )

@router.message(F.text.in_(["/start"]))
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )

@router.message(F.text == "/reset")
async def reset_state(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


@router.message(F.text == "/delete_me")
async def delete_me(message: types.Message):
    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == str(message.from_user.id))
        )
        profile = result.scalar_one_or_none()

        if profile:
            await session.delete(profile)
            await session.commit()
            await message.answer("üóëÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞. –ú–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
        else:
            await message.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.message(F.text == "üì∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
@router.message(F.text.in_(["/register"]))
async def start_registration(message: types.Message, state: FSMContext):
    async with get_session() as session:
        user_exists = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == str(message.from_user.id))
        )
        profile = user_exists.scalars().first()

        if profile:
            await message.answer_photo(
                photo=profile.photo_url,
                caption=f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n\n{format_profile(profile)}\n\n–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?",
                reply_markup=main_keyboard()
            )
            return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(RegisterState.name)

@router.message(F.text == "üìù –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def show_profile(message: types.Message):
    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == str(message.from_user.id))
        )
        profile = result.scalars().first()

        if profile:
            await message.answer_photo(
                photo=profile.photo_url,
                caption=format_profile(profile),
                reply_markup=main_keyboard()
            )
        else:
            await message.answer("‚ùå –¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_keyboard())

@router.message(RegisterState.name)
async def reg_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(RegisterState.age)

@router.message(RegisterState.age)
async def reg_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")

    await state.update_data(age=int(message.text))
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ/–î—Ä—É–≥–æ–µ):")
    await state.set_state(RegisterState.gender)

@router.message(RegisterState.gender)
async def reg_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è):")
    await state.set_state(RegisterState.about)

@router.message(RegisterState.about)
async def reg_about(message: types.Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await state.set_state(RegisterState.city)

@router.message(RegisterState.city)
async def reg_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî –ø—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ üì∑")
    await state.set_state(RegisterState.photo)


@router.message(F.text.regexp(r'^@id\d+$'))
async def search_profile(message: types.Message):
    telegram_id = message.text.replace('@id', '')
    
    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == telegram_id))
        profile = result.scalars().first()
        
        if profile:
            await message.answer_photo(
                photo=profile.photo_url,
                caption=format_profile(profile),
                reply_markup=main_keyboard()
            )
        else:
            await message.answer("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_keyboard())

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def edit_profile(message: types.Message, state: FSMContext):
    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == str(message.from_user.id))
        )
        profile = result.scalar_one_or_none()

        if not profile:
            await message.answer("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        await state.update_data(
            profile_id=profile.id,
            name=profile.name,
            age=profile.age,
            gender=profile.gender,
            interests=profile.interests,
            city=profile.city,
        )

        await message.answer("‚öôÔ∏è –î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(RegisterState.name)


@router.message(RegisterState.photo, F.photo)
async def save_profile_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id

    async with get_session() as session:
        profile_id = data.get("profile_id")
        
        if profile_id:
            result = await session.execute(select(UserProfile).where(UserProfile.id == profile_id))
            profile = result.scalar_one_or_none()

            if profile:
                profile.name = data["name"]
                profile.age = data["age"]
                profile.gender = data["gender"]
                profile.interests = data["interests"]
                profile.city = data["city"]
                profile.photo_url = photo_id
                await session.commit()

                await message.answer_photo(
                    photo=profile.photo_url,
                    caption=f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n{format_profile(profile)}",
                    reply_markup=main_keyboard()
                )
        else:
            new_profile = UserProfile(
                telegram_id=str(message.from_user.id),
                name=data['name'],
                age=data['age'],
                gender=data['gender'],
                interests=data['interests'],
                city=data['city'],
                photo_url=photo_id
            )
            session.add(new_profile)
            await session.commit()

            await message.answer_photo(
                photo=new_profile.photo_url,
                caption=f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{format_profile(new_profile)}\n\n–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —Ç–µ–±—è –ø–æ —Ç–µ–≥—É @id{new_profile.telegram_id}",
                reply_markup=main_keyboard()
            )

    await state.clear()

@router.message(RegisterState.photo)
async def wrong_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª.")

@router.message(F.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def show_random_profiles(message: types.Message, state: FSMContext):
    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(
                UserProfile.telegram_id != str(message.from_user.id)
        ))
        profiles = result.scalars().all()

        if not profiles:
            await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return

        shuffle(profiles)
        await state.update_data(
            profiles=[p.telegram_id for p in profiles],
            current_index=0
        )

        await show_profile_by_index(message, state)

def profiles_keyboard(current_index: int, total: int) -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.button(
        text="‚ù§Ô∏è –õ–∞–π–∫",
        callback_data=f"like_{current_index}"
    )

    if current_index + 1 < total:
        builder.button(
            text="‚û°Ô∏è –î–∞–ª–µ–µ",
            callback_data=f"next_{current_index + 1}"
        )

    return builder.as_markup()


async def show_profile_by_index(message: types.Message, state: FSMContext):
    data = await state.get_data()
    profiles = data.get('profiles', [])
    current_index = data.get('current_index', 0)
    
    if current_index >= len(profiles):
        await message.answer("üèÅ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã!")
        await state.clear()
        return

    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(
                UserProfile.telegram_id == profiles[current_index]
            )
        )
        profile = result.scalars().first()

    if profile:
        await message.answer_photo(
            photo=profile.photo_url,
            caption=f"{format_profile(profile)}\n\n"
                    f"–ê–Ω–∫–µ—Ç–∞ {current_index + 1} –∏–∑ {len(profiles)}",
            reply_markup=profiles_keyboard(current_index, len(profiles))
        )
    else:
        await state.update_data(current_index=current_index + 1)
        await show_profile_by_index(message, state)

@router.callback_query(F.data.startswith("next_"))
async def next_profile(callback: types.CallbackQuery, state: FSMContext):
    new_index = int(callback.data.split("_")[1])
    await state.update_data(current_index=new_index)
    await show_profile_by_index(callback.message, state)
    await callback.answer()



@router.callback_query(F.data.startswith("like_"))
async def like_profile(callback: types.CallbackQuery, state: FSMContext):
    profile_index = int(callback.data.split("_")[1])
    user_telegram_id = str(callback.from_user.id)

    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == user_telegram_id)
        )
        current_user = result.scalar_one_or_none()

        if not current_user:
            await callback.answer("‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
            return

        data = await state.get_data()
        profiles = data.get("profiles", [])
        if profile_index >= len(profiles):
            await callback.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        liked_telegram_id = profiles[profile_index]

        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == liked_telegram_id)
        )
        liked_user = result.scalar_one_or_none()

        if not liked_user:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        existing_like = await session.execute(
            select(UserLike).where(
                UserLike.liker_id == current_user.id,
                UserLike.liked_id == liked_user.id
            )
        )
        if existing_like.scalar():
            await callback.answer("–í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return

        like = UserLike(liker_id=current_user.id, liked_id=liked_user.id)
        session.add(like)
        await session.commit()

        await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        new_index = profile_index + 1
        if new_index >= len(profiles):
            await callback.message.answer("üèÅ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã!")
            await state.clear()
        else:
            await state.update_data(current_index=new_index)
            await show_profile_by_index(callback.message, state)

        reverse_like = await session.execute(
            select(UserLike).where(
                UserLike.liker_id == liked_user.id,
                UserLike.liked_id == current_user.id
            )
        )
        if reverse_like.scalar():
            print(f'liked_user.telegram_id {liked_user.telegram_id}')
            match_msg_to_liker = (
                f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å [{liked_user.name}](tg://user?id={liked_user.telegram_id})!\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòâ"
            )
            print(f'liked_user.telegram_id {current_user.telegram_id}')
            match_msg_to_liked = (
                f"üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å [{current_user.name}](tg://user?id={current_user.telegram_id})!\n"
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!"
            )

            try:
                await callback.bot.send_message(
                    liked_user.telegram_id,
                    match_msg_to_liked,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º—ç—Ç—á–∞ liked_user: {e}")

            try:
                await callback.message.answer(
                    match_msg_to_liker,
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º—ç—Ç—á–∞ current_user: {e}")



@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def delete_profile(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    async with get_session() as session:
        result = await session.execute(
            select(UserProfile).where(UserProfile.telegram_id == user_id)
        )
        profile = result.scalar_one_or_none()

        if not profile:
            await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
            return

        await session.execute(
            UserLike.__table__.delete().where(
                (UserLike.liker_id == profile.id) | (UserLike.liked_id == profile.id)
            )
        )

        await session.delete(profile)
        await session.commit()

    await state.clear()
    await message.answer("üóë –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_keyboard())



